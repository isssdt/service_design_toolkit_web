<?xml version='1.0' encoding='UTF-8' ?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"      
      xmlns:f="http://java.sun.com/jsf/core"
      xmlns:h="http://java.sun.com/jsf/html"
      xmlns:p="http://primefaces.org/ui">
    <h:head>
    <style>
      html, body {
        height: 100%;
        margin: 0;
        padding: 0;
      }
      #map {
        height: 440px;
        width: 790px;
      }
      
.controls {
  margin-top: 10px;
  border: 1px solid transparent;
  border-radius: 2px 0 0 2px;
  box-sizing: border-box;
  -moz-box-sizing: border-box;
  height: 32px;
  outline: none;
  box-shadow: 0 2px 6px rgba(0, 0, 0, 0.3);
}

#pac-input {
  background-color: #fff;
  font-family: Roboto;
  font-size: 15px;
  font-weight: 300;
  margin-left: 12px;
  padding: 0 11px 0 13px;
  text-overflow: ellipsis;
  width: 300px;
}

#pac-input:focus {
  border-color: #4d90fe;
}

.pac-container {
  font-family: Roboto;
}

#type-selector {
  color: #fff;
  background-color: #4d90fe;
  padding: 5px 11px 0px 11px;
}

#type-selector label {
  font-family: Roboto;
  font-size: 13px;
  font-weight: 300;
}

    </style>
  </h:head>
    <h:body>
        <h:form>
            <h:panelGrid columns="4" style="margin-bottom:10px" cellpadding="6">
                    <h:panelGrid columns="4">
                        <p:outputLabel for="journey_name" value="Journey Name" />
                        <p:inputText id="journey_name" value="#{journeyModel.journeyName}" readonly="true">
                        </p:inputText>
                        <p:message for="journey_name"/>
                        <br></br>             
                        <p:outputLabel for="no_of_field_researcher" value="No of Field Researchers" />                    
                        <p:inputText id="no_of_field_researcher" value="#{journeyModel.noOfFieldResearcher}" readonly="true"
                                     label="Number Of Field Researcher">
                        </p:inputText>
                        <p:message for="no_of_field_researcher" />
                    </h:panelGrid>   
                    <br></br> 
                    <h:panelGrid columns="4">
                        <p:outputLabel for="start_date" value="Start Date" />                    
                        <p:calendar id="start_date" value="#{journeyModel.startDate}" readonly="true" showOn="none" readonlyInput="true"
                                label="Start Date" />              
                        <p:message for="start_date" />  
                        <br></br> 
                        <p:outputLabel for="end_date" value="End Date" />                    
                        <p:calendar id="end_date" value="#{journeyModel.endDate}" label="End Date" showOn="none"
                                readonlyInput="true"/>              
                        <p:message for="end_date" />                   
                    </h:panelGrid>
                    <br></br>
                    <h:panelGrid columns="2">
                        <p:outputLabel for="touchpointname" value="Touch Point Name" />                    
                        <p:inputText id="touchpointname" value="#{touchPointModel.touchPointName}" readonly="true">
                        </p:inputText>
                        <p:message for="touchpointname" /> 
                        <br></br>    
                        <p:outputLabel for="description" value="Description" />                    
                        <p:inputText id="description" value="#{touchPointModel.channelDesc}">
                        </p:inputText>
                        <p:message for="description" />
                        
                         
                    </h:panelGrid>
                    <br></br>
                    <h:panelGrid columns="4">
                        <p:outputLabel for="action" value="Action" />                    
                        <p:inputText id="action" value="#{touchPointModel.touchpointAction}" readonly="true">
                        </p:inputText>
                        <p:message for="action" /> 
                        <br></br> 
                        <p:outputLabel for="channel" value="Channel" />                    
                        <p:inputText id="channel" value="#{touchPointModel.touchPointChannel}" readonly="true">
                        </p:inputText>
                        <p:message for="channel" />                    
                    </h:panelGrid>
                </h:panelGrid>
        </h:form>
      <p:panel id ="pan1">
          <p:inputText id="pac-input"/>
          <p:inputText id="radius" onchange="addcircle()" placeholder="enter radius">
          </p:inputText>
          <div id="map"></div>                
      </p:panel>
      <h:form>
          <h:inputHidden id="lat" value="#{touchPointModel.touchpointLatitude}"></h:inputHidden>
          <h:inputHidden id="lon" value="#{touchPointModel.touchpointLongitude}"></h:inputHidden>
          <h:inputHidden id="radi" value="#{touchPointModel.touchpointRadius}"></h:inputHidden>
          <h:inputHidden id="desc" value="#{touchPointModel.channelDesc}"></h:inputHidden>
          <p:commandButton value="Save" actionListener="#{touchPointController.addTouchPoint()}" 
                           action="addTouchPoint?faces-redirect=true">
              <f:param value="#{journeyModel;touchPointModel}"/>
          </p:commandButton>
      </h:form>
            

    <script>
    var map=null;
    var input=null;
    var autocomplete=null;
    var infowindow=null;
    var marker=null;
    var place=null;
    var address=null;
    var rad=null;
    function initMap() {
      map = new google.maps.Map(document.getElementById("map"), {
            center: {lat: 1.3521, lng: 103.8198},
            zoom: 7
      });
      input = /** @type {!HTMLInputElement} */(
            document.getElementById("pac-input"));
      autocomplete = new google.maps.places.Autocomplete(input);
            autocomplete.setTypes('geocode');
            autocomplete.bindTo('bounds', map);
      infowindow = new google.maps.InfoWindow();
      marker = new google.maps.Marker({
            map: map,
            anchorPoint: new google.maps.Point(0, -29)
      });
      autocomplete.addListener('place_changed', function() {
      infowindow.close();
      marker.setVisible(false);
      place = autocomplete.getPlace();
            if (!place.geometry) {
                window.alert("Autocomplete's returned place contains no geometry");
            return;
            }
        // If the place has a geometry, then present it on a map.
            if (place.geometry.viewport) {
                map.fitBounds(place.geometry.viewport);
            } else {
                map.setCenter(place.geometry.location);
                map.setZoom(17);  // Why 17? Because it looks good.
            }
            marker.setIcon(/** @type {google.maps.Icon} */({
            url: place.icon,
            size: new google.maps.Size(71, 71),
            origin: new google.maps.Point(0, 0),
            anchor: new google.maps.Point(17, 34),
            scaledSize: new google.maps.Size(35, 35)
            }));
            marker.setPosition(place.geometry.location);
            marker.setVisible(true);            
      address = '';
            if (place.address_components) {
            address = [
                (place.address_components[0] &amp;&amp; place.address_components[0].short_name || ''),
                (place.address_components[1] &amp;&amp; place.address_components[1].short_name || ''),
                (place.address_components[2] &amp;&amp; place.address_components[2].short_name || '')
                ].join(' ');
            }
            infowindow.setContent('<div><strong>' + place.name + '</strong><br></br></div>' + address);
            infowindow.open(map, marker);
            document.getElementById("j_idt35:lat").value= place.geometry.location.lat();
            document.getElementById("j_idt35:lon").value= place.geometry.location.lng();
            document.getElementById("j_idt5:description").value= address;
            document.getElementById("j_idt35:desc").value= address;
            
        })
    }   
    var draw_circle = null;
    function addcircle(){
      rad = parseInt(document.getElementById("radius").value);
      if (draw_circle != null) {
        draw_circle.setMap(null);
    }
      draw_circle = new google.maps.Circle({ 
        map: map,
        radius: rad,// 100m
        fillColor: '#AA0000',
        });
        draw_circle.bindTo('center', marker, 'position');
        console.log("rad" + rad);
        document.getElementById("j_idt35:radi").value= rad;
        
    }
    </script>
    <script
            src="https://maps.googleapis.com/maps/api/js?key=AIzaSyDTfYgSvgKe9cbMi4RxsmLGUZU5acZpZIo&amp;libraries=places&amp;callback=initMap"
        ></script>
    </h:body>
</html>
    
